"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-activity-calendar";
exports.ids = ["vendor-chunks/react-activity-calendar"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-activity-calendar/build/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-activity-calendar/build/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* __next_internal_client_entry_do_not_use__  cjs */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar chroma = __webpack_require__(/*! chroma-js */ \"(ssr)/./node_modules/chroma-js/chroma.js\");\nvar dateFns = __webpack_require__(/*! date-fns */ \"(ssr)/./node_modules/date-fns/index.mjs\");\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction _interopDefault(e) {\n    return e && e.__esModule ? e : {\n        default: e\n    };\n}\nvar chroma__default = /*#__PURE__*/ _interopDefault(chroma);\nvar React__default = /*#__PURE__*/ _interopDefault(React);\nfunction _extends() {\n    return _extends = Object.assign ? Object.assign.bind() : function(n) {\n        for(var e = 1; e < arguments.length; e++){\n            var t = arguments[e];\n            for(var r in t)({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n        }\n        return n;\n    }, _extends.apply(null, arguments);\n}\nconst NAMESPACE = \"react-activity-calendar\";\nconst LABEL_MARGIN = 8; // px\nconst DEFAULT_MONTH_LABELS = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n];\nconst DEFAULT_LABELS = {\n    months: DEFAULT_MONTH_LABELS,\n    weekdays: [\n        \"Sun\",\n        \"Mon\",\n        \"Tue\",\n        \"Wed\",\n        \"Thu\",\n        \"Fri\",\n        \"Sat\"\n    ],\n    totalCount: \"{{count}} activities in {{year}}\",\n    legend: {\n        less: \"Less\",\n        more: \"More\"\n    }\n};\nfunction useColorScheme() {\n    const [colorScheme, setColorScheme] = React.useState(\"light\");\n    const onChange = (event)=>setColorScheme(event.matches ? \"dark\" : \"light\");\n    React.useEffect(()=>{\n        const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n        setColorScheme(mediaQuery.matches ? \"dark\" : \"light\");\n        mediaQuery.addEventListener(\"change\", onChange);\n        return ()=>{\n            mediaQuery.removeEventListener(\"change\", onChange);\n        };\n    }, []);\n    return colorScheme;\n}\nfunction useIsClient() {\n    const [isClient, setClient] = React.useState(false);\n    React.useEffect(()=>{\n        setClient(true);\n    }, []);\n    return isClient;\n}\nconst query = \"(prefers-reduced-motion: reduce)\";\nfunction usePrefersReducedMotion() {\n    const [prefersReducedMotion, setPrefersReducedMotion] = React.useState(true);\n    React.useEffect(()=>{\n        const mediaQuery = window.matchMedia(query);\n        setPrefersReducedMotion(mediaQuery.matches);\n        const onChange = (event)=>{\n            setPrefersReducedMotion(event.matches);\n        };\n        mediaQuery.addEventListener(\"change\", onChange);\n        return ()=>{\n            mediaQuery.removeEventListener(\"change\", onChange);\n        };\n    }, []);\n    return prefersReducedMotion;\n}\nfunction styleInject(css, ref) {\n    if (ref === void 0) ref = {};\n    var insertAt = ref.insertAt;\n    if (typeof document === \"undefined\") {\n        return;\n    }\n    var head = document.head || document.getElementsByTagName(\"head\")[0];\n    var style = document.createElement(\"style\");\n    style.type = \"text/css\";\n    if (insertAt === \"top\") {\n        if (head.firstChild) {\n            head.insertBefore(style, head.firstChild);\n        } else {\n            head.appendChild(style);\n        }\n    } else {\n        head.appendChild(style);\n    }\n    if (style.styleSheet) {\n        style.styleSheet.cssText = css;\n    } else {\n        style.appendChild(document.createTextNode(css));\n    }\n}\nvar css_248z = \".styles-module_container__GBNxC {\\n  width: max-content; /* Calendar should not grow */\\n  max-width: 100%; /* Do not remove - flexbox parents */\\n  display: flex;\\n  flex-direction: column;\\n  gap: 8px;\\n}\\n\\n.styles-module_container__GBNxC rect {\\n  stroke: rgba(0, 0, 0, 0.08);\\n  stroke-width: 1px;\\n  shape-rendering: geometricPrecision;\\n}\\n\\n@media (prefers-color-scheme: dark) {\\n  .styles-module_container__GBNxC rect {\\n    stroke: rgba(255, 255, 255, 0.04);\\n  }\\n}\\n\\n.styles-module_scrollContainer__-bJC8 {\\n  max-width: 100%;\\n  overflow-x: auto;\\n  overflow-y: hidden;\\n}\\n\\n.styles-module_calendar__sT1ND {\\n  display: block; /* SVGs are inline-block by default */\\n  overflow: visible; /* Weekday labels are rendered left of the container */\\n}\\n\\n.styles-module_calendar__sT1ND text {\\n  fill: currentColor;\\n}\\n\\n.styles-module_footer__ZQ-Bl {\\n  display: flex;\\n  flex-wrap: wrap;\\n  gap: 4px 16px;\\n  white-space: nowrap;\\n}\\n\\n.styles-module_legendColors__kFY2e {\\n  margin-left: auto;\\n  display: flex;\\n  align-items: center;\\n  gap: 3px;\\n}\\n\\n@keyframes styles-module_loadingAnimation__V0w3h {\\n  0% {\\n    fill: var(--react-activity-calendar-loading);\\n  }\\n  50% {\\n    fill: var(--react-activity-calendar-loading-active);\\n  }\\n  100% {\\n    fill: var(--react-activity-calendar-loading);\\n  }\\n}\\n\";\nvar styles = {\n    \"container\": \"styles-module_container__GBNxC\",\n    \"scrollContainer\": \"styles-module_scrollContainer__-bJC8\",\n    \"calendar\": \"styles-module_calendar__sT1ND\",\n    \"footer\": \"styles-module_footer__ZQ-Bl\",\n    \"legendColors\": \"styles-module_legendColors__kFY2e\",\n    \"loadingAnimation\": \"styles-module_loadingAnimation__V0w3h\"\n};\nstyleInject(css_248z);\nfunction groupByWeeks(activities, weekStart = 0 // 0 = Sunday\n) {\n    if (activities.length === 0) {\n        return [];\n    }\n    const normalizedActivities = fillHoles(activities);\n    // Determine the first date of the calendar. If the first date is not the\n    // set start weekday, the selected weekday one week earlier is used.\n    const firstDate = dateFns.parseISO(normalizedActivities[0].date);\n    const firstCalendarDate = dateFns.getDay(firstDate) === weekStart ? firstDate : dateFns.subWeeks(dateFns.nextDay(firstDate, weekStart), 1);\n    // To correctly group activities by week, it is necessary to left-pad the list\n    // because the first date might not be set start weekday.\n    const paddedActivities = [\n        ...Array(dateFns.differenceInCalendarDays(firstDate, firstCalendarDate)).fill(undefined),\n        ...normalizedActivities\n    ];\n    const numberOfWeeks = Math.ceil(paddedActivities.length / 7);\n    // Finally, group activities by week\n    return Array(numberOfWeeks).fill(undefined).map((_, weekIndex)=>paddedActivities.slice(weekIndex * 7, weekIndex * 7 + 7));\n}\n/**\n * The calendar expects a continuous sequence of days,\n * so fill gaps with empty activity data.\n */ function fillHoles(activities) {\n    const dateMap = {};\n    for (const activity of activities){\n        dateMap[activity.date] = activity;\n    }\n    return dateFns.eachDayOfInterval({\n        start: dateFns.parseISO(activities[0].date),\n        end: dateFns.parseISO(activities[activities.length - 1].date)\n    }).map((day)=>{\n        const date = dateFns.formatISO(day, {\n            representation: \"date\"\n        });\n        if (dateMap[date]) {\n            return dateMap[date];\n        }\n        return {\n            date,\n            count: 0,\n            level: 0\n        };\n    });\n}\nfunction getMonthLabels(weeks, monthNames = DEFAULT_MONTH_LABELS) {\n    return weeks.reduce((labels, week, weekIndex)=>{\n        const firstActivity = week.find((activity)=>activity !== undefined);\n        if (!firstActivity) {\n            throw new Error(`Unexpected error: Week ${weekIndex + 1} is empty: [${week}].`);\n        }\n        const month = monthNames[dateFns.getMonth(dateFns.parseISO(firstActivity.date))];\n        const prevLabel = labels[labels.length - 1];\n        if (weekIndex === 0 || prevLabel.label !== month) {\n            return [\n                ...labels,\n                {\n                    weekIndex,\n                    label: month\n                }\n            ];\n        }\n        return labels;\n    }, []).filter(({ weekIndex }, index, labels)=>{\n        // Labels should only be shown if there is \"enough\" space (data).\n        // This is a naive implementation that does not take the block size,\n        // font size etc. into account.\n        const minWeeks = 3;\n        // Skip the first month label if there is not enough space to the next one.\n        if (index === 0) {\n            return labels[1] && labels[1].weekIndex - weekIndex >= minWeeks;\n        }\n        // Skip the last month label the there is not enough data in that month to\n        // avoid overflowing the calendar on the right.\n        if (index === labels.length - 1) {\n            return weeks.slice(weekIndex).length >= minWeeks;\n        }\n        return true;\n    });\n}\nfunction getClassName(name, styles) {\n    if (styles) {\n        return `${NAMESPACE}__${name} ${styles}`;\n    }\n    return `${NAMESPACE}__${name}`;\n}\nfunction generateEmptyData() {\n    const year = new Date().getFullYear();\n    const days = dateFns.eachDayOfInterval({\n        start: new Date(year, 0, 1),\n        end: new Date(year, 11, 31)\n    });\n    return days.map((date)=>({\n            date: dateFns.formatISO(date, {\n                representation: \"date\"\n            }),\n            count: 0,\n            level: 0\n        }));\n}\nfunction maxWeekdayLabelLength(firstWeek, weekStart, labels, fontSize) {\n    return firstWeek.reduce((maxLength, _, index)=>{\n        if (index % 2 !== 0) {\n            const dayIndex = (index + weekStart) % 7;\n            const curLength = Math.ceil(calcTextDimensions(labels[dayIndex], fontSize).width);\n            return Math.max(maxLength, curLength);\n        }\n        return maxLength;\n    }, 0);\n}\nfunction calcTextDimensions(text, fontSize) {\n    if (typeof document === \"undefined\" || \"undefined\" === \"undefined\") {\n        throw new Error(\"calcTextDimensions() requires browser APIs\");\n    }\n    if (fontSize < 1) {\n        throw new RangeError(\"fontSize must be positive\");\n    }\n    if (text.length === 0) {\n        return {\n            width: 0,\n            height: 0\n        };\n    }\n    const namespace = \"http://www.w3.org/2000/svg\";\n    const svg = document.createElementNS(namespace, \"svg\");\n    svg.style.position = \"absolute\";\n    svg.style.visibility = \"hidden\";\n    svg.style.fontFamily = window.getComputedStyle(document.body).fontFamily;\n    svg.style.fontSize = `${fontSize}px`;\n    const textNode = document.createElementNS(namespace, \"text\");\n    textNode.textContent = text;\n    svg.appendChild(textNode);\n    document.body.appendChild(svg);\n    const boundingBox = textNode.getBBox();\n    document.body.removeChild(svg);\n    return {\n        width: boundingBox.width,\n        height: boundingBox.height\n    };\n}\nfunction createTheme(input, size = 5) {\n    const defaultTheme = createDefaultTheme(size);\n    if (input) {\n        validateTheme(input, size);\n        input.light = input.light ?? defaultTheme.light;\n        input.dark = input.dark ?? defaultTheme.dark;\n        return {\n            light: isColorScale(input.light, size) ? input.light : createColorScale(input.light, size),\n            dark: isColorScale(input.dark, size) ? input.dark : createColorScale(input.dark, size)\n        };\n    }\n    return defaultTheme;\n}\nfunction createDefaultTheme(size) {\n    return {\n        light: createColorScale([\n            \"hsl(0, 0%, 92%)\",\n            \"hsl(0, 0%, 26%)\"\n        ], size),\n        dark: createColorScale([\n            \"hsl(0, 0%, 20%)\",\n            \"hsl(0, 0%, 92%)\"\n        ], size)\n    };\n}\nfunction validateTheme(input, size) {\n    if (typeof input !== \"object\" || input.light === undefined && input.dark === undefined) {\n        throw new Error(`The theme object must contain at least one of the fields \"light\" and \"dark\" with exactly 2 or ${size} colors respectively.`);\n    }\n    if (input.light) {\n        const { length } = input.light;\n        if (length !== 2 && length !== size) {\n            throw new Error(`theme.light must contain exactly 2 or ${size} colors, ${length} passed.`);\n        }\n    }\n    if (input.dark) {\n        const { length } = input.dark;\n        if (length !== 2 && length !== size) {\n            throw new Error(`theme.dark must contain exactly 2 or ${size} colors, ${length} passed.`);\n        }\n    }\n}\nfunction isColorScale(colors, size) {\n    const invalidColor = colors.find((color)=>!chroma__default.default.valid(color));\n    if (invalidColor) {\n        throw new Error(`Invalid color \"${invalidColor}\" passed. All CSS color formats are accepted.`);\n    }\n    return colors.length === size;\n}\nfunction createColorScale(colors, size) {\n    return chroma__default.default.scale(colors).mode(\"lch\").colors(size);\n}\nconst ActivityCalendar = ({ data, blockMargin = 4, blockRadius = 2, blockSize = 12, colorScheme = undefined, eventHandlers = {}, fontSize = 14, hideColorLegend = false, hideMonthLabels = false, hideTotalCount = false, labels: labelsProp = undefined, maxLevel = 4, loading = false, renderBlock = undefined, showWeekdayLabels = false, style: styleProp = {}, theme: themeProp = undefined, totalCount: totalCountProp = undefined, weekStart = 0 // Sunday\n })=>{\n    maxLevel = Math.max(1, maxLevel);\n    const theme = createTheme(themeProp, maxLevel + 1);\n    const systemColorScheme = useColorScheme();\n    const colorScale = theme[colorScheme ?? systemColorScheme];\n    const useAnimation = !usePrefersReducedMotion();\n    // Calculating the weekday label offset only works in the browser.\n    // So disable SSR in this case.\n    const isClient = useIsClient();\n    if (showWeekdayLabels && !isClient) {\n        return null;\n    }\n    if (loading) {\n        data = generateEmptyData();\n    }\n    if (data.length === 0) {\n        return null;\n    }\n    const year = dateFns.getYear(dateFns.parseISO(data[0]?.date));\n    const weeks = groupByWeeks(data, weekStart);\n    const labels = Object.assign({}, DEFAULT_LABELS, labelsProp);\n    const labelHeight = hideMonthLabels ? 0 : fontSize + LABEL_MARGIN;\n    const weekdayLabelOffset = showWeekdayLabels ? maxWeekdayLabelLength(weeks[0], weekStart, labels.weekdays, fontSize) + LABEL_MARGIN : undefined;\n    function getDimensions() {\n        return {\n            width: weeks.length * (blockSize + blockMargin) - blockMargin,\n            height: labelHeight + (blockSize + blockMargin) * 7 - blockMargin\n        };\n    }\n    function getEventHandlers(activity) {\n        return Object.keys(eventHandlers).reduce((handlers, key)=>({\n                ...handlers,\n                [key]: (event)=>eventHandlers[key]?.(event)(activity)\n            }), {});\n    }\n    function renderCalendar() {\n        return weeks.map((week, weekIndex)=>week.map((activity, dayIndex)=>{\n                if (!activity) {\n                    return null;\n                }\n                if (activity.level < 0 || activity.level > maxLevel) {\n                    throw new RangeError(`Provided activity level ${activity.level} for ${activity.date} is out of range. It must be between 0 and ${maxLevel}.`);\n                }\n                const style = loading && useAnimation ? {\n                    animation: `${styles.loadingAnimation} 1.75s ease-in-out infinite`,\n                    animationDelay: `${weekIndex * 20 + dayIndex * 20}ms`\n                } : undefined;\n                const block = /*#__PURE__*/ React__default.default.createElement(\"rect\", _extends({}, getEventHandlers(activity), {\n                    x: 0,\n                    y: labelHeight + (blockSize + blockMargin) * dayIndex,\n                    width: blockSize,\n                    height: blockSize,\n                    rx: blockRadius,\n                    ry: blockRadius,\n                    fill: colorScale[activity.level],\n                    \"data-date\": activity.date,\n                    \"data-level\": activity.level,\n                    style: style\n                }));\n                return /*#__PURE__*/ React__default.default.createElement(React.Fragment, {\n                    key: activity.date\n                }, renderBlock ? renderBlock(block, activity) : block);\n            })).map((week, x)=>/*#__PURE__*/ React__default.default.createElement(\"g\", {\n                key: x,\n                transform: `translate(${(blockSize + blockMargin) * x}, 0)`\n            }, week));\n    }\n    function renderFooter() {\n        if (hideTotalCount && hideColorLegend) {\n            return null;\n        }\n        const totalCount = typeof totalCountProp === \"number\" ? totalCountProp : data.reduce((sum, activity)=>sum + activity.count, 0);\n        return /*#__PURE__*/ React__default.default.createElement(\"footer\", {\n            className: getClassName(\"footer\", styles.footer),\n            style: {\n                marginLeft: weekdayLabelOffset\n            }\n        }, loading && /*#__PURE__*/ React__default.default.createElement(\"div\", null, \"\\xa0\"), !loading && !hideTotalCount && /*#__PURE__*/ React__default.default.createElement(\"div\", {\n            className: getClassName(\"count\")\n        }, labels.totalCount ? labels.totalCount.replace(\"{{count}}\", String(totalCount)).replace(\"{{year}}\", String(year)) : `${totalCount} activities in ${year}`), !loading && !hideColorLegend && /*#__PURE__*/ React__default.default.createElement(\"div\", {\n            className: getClassName(\"legend-colors\", styles.legendColors)\n        }, /*#__PURE__*/ React__default.default.createElement(\"span\", {\n            style: {\n                marginRight: \"0.4em\"\n            }\n        }, labels?.legend?.less ?? \"Less\"), Array(maxLevel + 1).fill(undefined).map((_, level)=>/*#__PURE__*/ React__default.default.createElement(\"svg\", {\n                width: blockSize,\n                height: blockSize,\n                key: level\n            }, /*#__PURE__*/ React__default.default.createElement(\"rect\", {\n                width: blockSize,\n                height: blockSize,\n                fill: colorScale[level],\n                rx: blockRadius,\n                ry: blockRadius\n            }))), /*#__PURE__*/ React__default.default.createElement(\"span\", {\n            style: {\n                marginLeft: \"0.4em\"\n            }\n        }, labels?.legend?.more ?? \"More\")));\n    }\n    function renderLabels() {\n        if (!showWeekdayLabels && hideMonthLabels) {\n            return null;\n        }\n        return /*#__PURE__*/ React__default.default.createElement(React__default.default.Fragment, null, showWeekdayLabels && /*#__PURE__*/ React__default.default.createElement(\"g\", {\n            className: getClassName(\"legend-weekday\")\n        }, weeks[0].map((_, index)=>{\n            if (index % 2 === 0) {\n                return null;\n            }\n            const dayIndex = (index + weekStart) % 7;\n            return /*#__PURE__*/ React__default.default.createElement(\"text\", {\n                x: -LABEL_MARGIN,\n                y: labelHeight + (blockSize + blockMargin) * index + blockSize / 2,\n                dominantBaseline: \"middle\",\n                textAnchor: \"end\",\n                key: index\n            }, labels.weekdays[dayIndex]);\n        })), !hideMonthLabels && /*#__PURE__*/ React__default.default.createElement(\"g\", {\n            className: getClassName(\"legend-month\")\n        }, getMonthLabels(weeks, labels.months).map(({ label, weekIndex })=>/*#__PURE__*/ React__default.default.createElement(\"text\", {\n                x: (blockSize + blockMargin) * weekIndex,\n                dominantBaseline: \"hanging\",\n                key: weekIndex\n            }, label))));\n    }\n    const { width, height } = getDimensions();\n    const containerStyles = {\n        fontSize,\n        ...useAnimation && {\n            [`--${NAMESPACE}-loading`]: colorScale[0],\n            [`--${NAMESPACE}-loading-active`]: colorScheme === \"light\" ? chroma__default.default(colorScale[0]).darken(0.3).hex() : chroma__default.default(colorScale[0]).brighten(0.25).hex()\n        }\n    };\n    return /*#__PURE__*/ React__default.default.createElement(\"article\", {\n        className: `${NAMESPACE} ${styles.container}`,\n        style: {\n            ...styleProp,\n            ...containerStyles\n        }\n    }, /*#__PURE__*/ React__default.default.createElement(\"div\", {\n        className: getClassName(\"scroll-container\", styles.scrollContainer)\n    }, /*#__PURE__*/ React__default.default.createElement(\"svg\", {\n        width: width,\n        height: height,\n        viewBox: `0 0 ${width} ${height}`,\n        className: getClassName(\"calendar\", styles.calendar),\n        style: {\n            marginLeft: weekdayLabelOffset\n        }\n    }, !loading && renderLabels(), renderCalendar())), renderFooter());\n};\nconst Skeleton = (props)=>/*#__PURE__*/ React__default.default.createElement(ActivityCalendar, _extends({\n        data: []\n    }, props));\nexports.Skeleton = Skeleton;\nexports[\"default\"] = ActivityCalendar; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-activity-calendar/build/index.js\n");

/***/ })

};
;